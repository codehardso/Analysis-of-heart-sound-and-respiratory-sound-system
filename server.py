# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'server.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import socket
import threading
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QApplication, QWidget, QMessageBox

class Ui_MainWindow(object):
    def setupUi(self, Server):
        Server.setObjectName("MainWindow")
        Server.resize(1980, 800)
        self.centralwidget = QtWidgets.QWidget(Server)
        self.centralwidget.setStyleSheet("background-color:qlineargradient(spread:pad, x1:0, y1:0, x2:0.210227, y2:0.272727, stop:0 rgba(251, 182, 0, 0), stop:1 rgba(255, 255, 255, 255))")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.exit1 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Heiti Std")
        font.setPointSize(12)
        self.exit1.setFont(font)
        self.exit1.setObjectName("exit")
        self.gridLayout.addWidget(self.exit1, 7, 1, 1, 2)
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Heiti Std")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.begin = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Heiti Std")
        font.setPointSize(12)
        self.begin.setFont(font)
        self.begin.setObjectName("begin")
        self.gridLayout.addWidget(self.begin, 5, 1, 1, 2)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Heiti Std")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 2, 0, 1, 1)
        self.ip = QtWidgets.QLineEdit(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Heiti Std")
        font.setPointSize(12)
        self.ip.setFont(font)
        self.ip.setObjectName("ip")
        self.gridLayout.addWidget(self.ip, 0, 1, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 4, 3, 4, 1)
        self.port = QtWidgets.QLineEdit(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Heiti Std")
        font.setPointSize(12)
        self.port.setFont(font)
        self.port.setObjectName("port")
        self.gridLayout.addWidget(self.port, 2, 1, 1, 1)
        self.stop1 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Heiti Std")
        font.setPointSize(12)
        self.stop1.setFont(font)
        self.stop1.setObjectName("stop")
        self.gridLayout.addWidget(self.stop1, 6, 1, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout)
        self.info = QtWidgets.QTextBrowser(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        self.info.setFont(font)
        self.info.setObjectName("info")
        self.verticalLayout.addWidget(self.info)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        Server.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Server)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1980, 22))
        self.menubar.setObjectName("menubar")
        Server.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Server)
        self.statusbar.setObjectName("statusbar")
        Server.setStatusBar(self.statusbar)

        self.retranslateUi(Server)
        QtCore.QMetaObject.connectSlotsByName(Server)

        self.begin.clicked.connect(self.start)
        self.stop1.clicked.connect(self.stopchat)
        self.exit1.clicked.connect(self.exit)

        # 其他变量
        self.listenFlag = False
        self.user_change_flag = False
        self.serverDic = {}
        self.socketDic = {}
        self.Server = Server
        self.Link_list = []

    def retranslateUi(self, Server):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.exit1.setText(_translate("MainWindow", "退出"))
        self.label.setText(_translate("MainWindow", "IP"))
        self.begin.setText(_translate("MainWindow", "开始"))
        self.label_2.setText(_translate("MainWindow", "Port"))
        self.stop1.setText(_translate("MainWindow", "  停止"))

    def exit(self):
        #self.stop()
        for i in range(len(self.Link_list)):
            self.Link_list[i].stop()
        self.listenFlag = False
        self.serverDic["Server"].close()
        del self.serverDic["Server"]
        self.Server.close()

    def stopchat(self):
        if self.listenFlag:
            self.info.append("stop listening...")
            self.listenFlag = False
        else:
            self.info.append("has already stopped listening")

    def start(self):
        if "Server" not in self.serverDic.keys():
            self.serverDic["Server"] = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.serverDic["Server"].bind((self.ip.text(), int(self.port.text())))

        if not self.listenFlag:
            self.listenFlag = True
            self.serverDic["Server"].listen(5)
            self.info.append('服务器运行中……')

            # 开始创建一个线程来监听客户端的连接
            t1 = threading.Thread(target=self.listen, args=())
            t1.start()
            self.Link_list.append(t1)

    def listen(self):
        while self.listenFlag:
            # 接受一个新连接:accept函数会一直等待直到接收到连接
            sock, addr = self.serverDic["Server"].accept()
            # 创建一个新线程来处理与客户端的连接:
            t = threading.Thread(target=self.tcplink, args=(sock, addr))
            t.start()

    def tcplink(self, sock, addr):
        sock_name = sock.recv(1024).decode('utf-8')
        self.socketDic[sock_name] = sock
        self.info.append("%s 登录成功" % sock_name)

        tem = ""  # 存储在线人的id
        for Key in self.socketDic.keys():
            tem = tem + Key + "\n"
        for Key in self.socketDic.keys():
            self.socketDic[Key].send("userupdate".encode('utf-8'))
            self.socketDic[Key].send(tem.encode('utf-8'))

        while True:
            # mode: exit-----退出
            # mode: sendmess-----发送消息
            # mode: sendmess_group-----群发消息


            mode = sock.recv(1024).decode('utf-8')

            if mode == "exit":  # 当用户下线时，他会向服务端发送exit信息
                break

            elif mode == "sendmess":
                towho_message = sock.recv(1024).decode('utf-8')
                towho, message = towho_message.split("-*-")
                print(f"{sock_name} 对 {towho} 说：  {message}")
                self.info.append(f"{sock_name} 对 {towho} 说：  {message}")
                for onlinename in self.socketDic.keys():
                    if onlinename == towho:
                        self.socketDic[onlinename].send("sendmess".encode('utf-8'))
                        self.socketDic[onlinename].send((sock_name + "私聊" + towho + "说: " + message + "\n").encode('utf-8'))
                        self.socketDic[sock_name].send("sendmess".encode('utf-8'))
                        self.socketDic[sock_name].send((sock_name + "（我）" + "私聊" + towho + "说: " + message + "\n").encode('utf-8'))

            elif mode == "sendmess_group":
                towho_message = sock.recv(1024).decode('utf-8')
                towho, message = towho_message.split("-*-")
                print(f"{sock_name} 说：  {message}")
                self.info.append(f"{sock_name} 说：  {message}")
                for onlinename in self.socketDic.keys():
                    #if onlinename != towho:
                    self.socketDic[onlinename].send("sendmess".encode('utf-8'))
                    self.socketDic[onlinename].send((sock_name + ": " + message + "\n").encode('utf-8'))
                        #self.socketDic[sock_name].send("sendmess".encode('utf-8'))
                        #self.socketDic[sock_name].send((sock_name + "（我）" + ": " + message + "\n").encode('utf-8'))




        self.info.append("%s 下线!" % sock_name)

        # 生成新的在线人ID
        tem = ""
        for Key in self.socketDic.keys():
            if Key != sock_name:
                tem = tem + Key + "\n"

        # 当一个用户下线时，像其它所有的在线用户发送新的在线人信息
        for Key in self.socketDic.keys():
            if Key != sock_name:
                self.socketDic[Key].send("userupdate".encode('utf-8'))
                self.socketDic[Key].send(tem.encode('utf-8'))

        sock.close()
        del self.socketDic[sock_name]



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
